@startmindmap

+[#red] B+树索引
++[#lightgreen] 聚簇索引
+++_ 使用记录主键值的大小进行记录和页的排序
++++_ 页内的记录是按照主键的大小顺序排成一个单向链表
++++_ 各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表
++++_ 存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表
+++_ B+树的叶子节点存储的是完整的用户记录（存储了所有列的值）
+++_ 只能在搜索条件是主键值时才能发挥作用

++[#lightgreen] 二级索引
+++_ 其他类同聚簇索引，按照索引列排序的，并且叶子节点只存储索引列值和主键值

++[#lightgreen] 索引的代价
+++_ 空间
++++_ 建立索引就要建立b+树占用空间
+++_ 时间
++++_ 数据增删改，操作相应的b+树
++[#lightgreen] B+树索引适用条件
+++_ 全值匹配
+++_ 匹配左边的列
+++_ 匹配列前缀
+++_ 匹配范围值
+++_ 精确匹配某一列并范围匹配另一列
+++_ 用于排序
++++_ 使用联合索引排序注意问题
+++++_ 按照索引列顺序排序
++++_ 不可以使用索引排序的情况
+++++_ ASC、DESC混用
+++++_ 排序列包含非同一个索引的列
+++++_ 排序列使用了复杂的表达式
+++_ 用于分组

++[#lightgreen] 回表
+++_ 全局扫描
+++_ 二级索引 + 回表
++++_ 二级索引树里只存储了索引列——主键列的值，如果需要非索引列、主键列的值，则需要回到聚簇索引查找

++[#lightgreen] 覆盖索引
+++_ 查询列里只包含索引列
+++_ 会减少回表操作

++[#lightgreen] 如何挑选索引
+++_ 只为用于搜索、排序、分组的列创建缩影
+++_ 考虑列的基数
++++_ 基数大的创建索引，基数小的创建索引效果可能不明显
+++_ 索引列的类型尽量小
+++_ 索引字符串的前缀
++++_ 索引列前缀对排序的影响
+++_ 让索引列再比较表达式中单独出现
++++_ 对索引列不用用函数，索引会失效
+++_ 尽可能减少聚簇索引的页面分裂和记录移位，建议逐渐拥有AUTO_INCREMENT属性
+++_ 不要用重复和冗余索引
+++_ 尽量使用覆盖索引查询，避免回表带来的性能损耗
@endmindmap
